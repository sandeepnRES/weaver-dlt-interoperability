(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{107:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return b}));var i=n(3),a=n(7),r=(n(0),n(133)),o={id:"ledger-initialization",title:"Ledger Initialization"},l={unversionedId:"external/getting-started/test-network/ledger-initialization",id:"external/getting-started/test-network/ledger-initialization",isDocsHomePage:!1,title:"Ledger Initialization",description:"\x3c!--",source:"@site/docs/external/getting-started/test-network/ledger-initialization.md",slug:"/external/getting-started/test-network/ledger-initialization",permalink:"/weaver-dlt-interoperability/docs/external/getting-started/test-network/ledger-initialization",editUrl:"https://github.com/hyperledger-labs/weaver-dlt-interoperability/edit/master/docs/external/getting-started/test-network/ledger-initialization.md",version:"current",sidebar:"Documentation",previous:{title:"Setup with Imported Dockerized Weaver Components",permalink:"/weaver-dlt-interoperability/docs/external/getting-started/test-network/setup-packages-docker"},next:{title:"Advanced Configuration",permalink:"/weaver-dlt-interoperability/docs/external/getting-started/test-network/advanced-configuration"}},c=[{value:"Initializing the Fabric Networks",id:"initializing-the-fabric-networks",children:[{value:"Configuring the Fabric CLI",id:"configuring-the-fabric-cli",children:[]},{value:"Bootstrapping Network and Application State",id:"bootstrapping-network-and-application-state",children:[]}]},{value:"Initializing the Corda Network",id:"initializing-the-corda-network",children:[{value:"Bootstrapping Network and Application State",id:"bootstrapping-network-and-application-state-1",children:[]}]}],p={toc:c};function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(i.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Once the two Fabric networks and the Corda network are up and running along with their associated relays and drivers, we must initialize states in those networks to prepare them for interoperation. For the Fabric networks, this involves recording state in the channel ledgers, and for the Corda network, in the nodes' vaults."),Object(r.b)("h2",{id:"initializing-the-fabric-networks"},"Initializing the Fabric Networks"),Object(r.b)("p",null,"We use the Fabric CLI (",Object(r.b)("inlineCode",{parentName:"p"},"fabric-cli"),") built earlier (in ",Object(r.b)("inlineCode",{parentName:"p"},"samples/fabric/fabric-cli"),") for this purpose."),Object(r.b)("h3",{id:"configuring-the-fabric-cli"},"Configuring the Fabric CLI"),Object(r.b)("p",null,"During bootstrap, the ledgers in both ",Object(r.b)("inlineCode",{parentName:"p"},"network1")," and ",Object(r.b)("inlineCode",{parentName:"p"},"network2")," must be populated with the following information scoped by the interoperation chaincode:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Access control policies governing requests from foreign networks"),Object(r.b)("li",{parentName:"ul"},"Security group info for foreign networks (i.e., identities of network units and their membership providers' certificate chains)"),Object(r.b)("li",{parentName:"ul"},"Verification policies for proofs supplied by foreign networks\nKnowledge of foreign networks that must be configured in this stage is as follows:"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"network1")," has policies and security group info for ",Object(r.b)("inlineCode",{parentName:"li"},"network2")," and ",Object(r.b)("inlineCode",{parentName:"li"},"Corda_Network")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"network2")," has policies and security group info for ",Object(r.b)("inlineCode",{parentName:"li"},"network1")," and ",Object(r.b)("inlineCode",{parentName:"li"},"Corda_Network"),"\n(",Object(r.b)("em",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"em"},"Corda_Network")," will be launched later."),")\nThe ledgers must also be populated with sample key-value pairs for testing interoperation flows, scoped by the sample application chaincode.")),Object(r.b)("p",null,"Prepare ",Object(r.b)("inlineCode",{parentName:"p"},"fabric-cli")," for configuration as follows:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Navigate to the ",Object(r.b)("inlineCode",{parentName:"li"},"samples/fabric/fabric-cli")," folder."),Object(r.b)("li",{parentName:"ul"},"Create a ",Object(r.b)("inlineCode",{parentName:"li"},"config.json")," file by copying the ",Object(r.b)("inlineCode",{parentName:"li"},"config.template.json")," and setting (or adding or removing) suitable values:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"For each network, the relay port and connection profile paths are specified using the keys ",Object(r.b)("inlineCode",{parentName:"li"},"relayPort")," and ",Object(r.b)("inlineCode",{parentName:"li"},"connProfilePath")," respectively.",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Replace ",Object(r.b)("inlineCode",{parentName:"li"},"<PATH-TO-WEAVER>")," with the absolute path location of the ",Object(r.b)("inlineCode",{parentName:"li"},"weaver-dlt-interoperability")," clone folder."),Object(r.b)("li",{parentName:"ul"},"Otherwise, leave the default values unchanged."))))),Object(r.b)("li",{parentName:"ul"},"Create a ",Object(r.b)("inlineCode",{parentName:"li"},".env")," file by copying ",Object(r.b)("inlineCode",{parentName:"li"},".env.template")," and setting following parameter values (",Object(r.b)("em",{parentName:"li"},"replace ",Object(r.b)("inlineCode",{parentName:"em"},"<PATH-TO-WEAVER>")," with the location of your clone of weaver"),"):",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"If Relays and Drivers are deployed in the host machine:",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre"},"MEMBER_CREDENTIAL_FOLDER=<PATH-TO-WEAVER>/samples/fabric/fabric-cli/src/data/credentials\nCONFIG_PATH=./config.json\n"))),Object(r.b)("li",{parentName:"ul"},"If Relays and Drivers are deployed in the Docker containers:",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre"},"MEMBER_CREDENTIAL_FOLDER=<PATH-TO-WEAVER>/samples/fabric/fabric-cli/src/data/credentials_docker\nCONFIG_PATH=./config.json\n"))),Object(r.b)("li",{parentName:"ul"},"Leave the default values unchanged for the other parameters."))),Object(r.b)("li",{parentName:"ul"},"Run the following commands:",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre"},"./bin/fabric-cli env set-file ./.env\n"))),Object(r.b)("li",{parentName:"ul"},"If you haven't assigned a value to the CONFIG_PATH environment variable in .env, then run this:",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre"},"./bin/fabric-cli config set-file ./config.json\n")))),Object(r.b)("p",null,"See the ",Object(r.b)("a",{parentName:"p",href:"#fabric-cli"},"Fabric CLI")," section for more information."),Object(r.b)("h3",{id:"bootstrapping-network-and-application-state"},"Bootstrapping Network and Application State"),Object(r.b)("p",null,"Finally, to prepare both ",Object(r.b)("inlineCode",{parentName:"p"},"network1")," and ",Object(r.b)("inlineCode",{parentName:"p"},"network2")," for interoperation, run:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli configure all network1 network2\n")),Object(r.b)("h2",{id:"initializing-the-corda-network"},"Initializing the Corda Network"),Object(r.b)("p",null,"Once the Corda network is launched, the client application (built earlier) needs to be exercised to generate network (ledger) state in preparation to test interoperation flows."),Object(r.b)("h3",{id:"bootstrapping-network-and-application-state-1"},"Bootstrapping Network and Application State"),Object(r.b)("p",null,"Just as we did for either Fabric network, the Corda network ledger (or ",Object(r.b)("em",{parentName:"p"},"vault")," on each node) must be initialized with access control policies, verification policies, and security group information for the two Fabric networks. Further, sample key-value pairs need to be recorded so we can later share them with a Fabric network via an interoperation flow."),Object(r.b)("p",null,"Bootstrap the Corda network and application states as follows:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Navigate to the ",Object(r.b)("inlineCode",{parentName:"li"},"samples/corda/corda-simple-application")," folder."),Object(r.b)("li",{parentName:"ul"},"Run the following: ",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"If Relays and Drivers are deployed in the host machine:",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-bash"},"make initialise-vault\n"))),Object(r.b)("li",{parentName:"ul"},"If Relays and Drivers are deployed in the Docker containers:",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-bash"},"make initialise-vault-docker\n")))))))}b.isMDXComponent=!0},133:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return m}));var i=n(0),a=n.n(i);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),b=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=b(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),s=b(n),u=i,m=s["".concat(o,".").concat(u)]||s[u]||d[u]||r;return n?a.a.createElement(m,l(l({ref:t},p),{},{components:n})):a.a.createElement(m,l({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);